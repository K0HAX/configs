#+TITLE: Michael's Emacs Config
#+AUTHOR: Michael Englehorn
#+EMAIL: michael@englehorn.com

* Preamble
  This is my Emacs config, which is almost a single file thanks to [[http://orgmode.org/worg/org-contrib/babel/intro.html][org-babel]].
  
  Although GitHub does render =.org= files nicely, I recommend viewing it in Emacs, as GitHub isn't fully compatible. Using org-mode gives a nice overview and makes it quick and easy to navigate and make changes.
  
  #+latex: \newpage
* Beginning config
** Personal information
   #+BEGIN_SRC emacs-lisp
   (setq user-full-name "Michael Englehorn")
   (setq user-mail-address "michael@englehorn.com")
   #+END_SRC
   #+latex: \newpage
* Package related
  
  Setup general package related settings.
  
** package.el
   
   Initialize package.el, the built-in package manager.
   
   #+BEGIN_SRC emacs-lisp
   (package-initialize)
   #+END_SRC
   
   These are the package repositories I use:
   
   #+BEGIN_SRC emacs-lisp
   (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
   #+END_SRC
   
** use-package
   
   Install/activate [[https://github.com/jwiegley/use-package][use-package]], basically a wrapper for =package.el=.
   
    - makes installing and configuring other packages nicer and easier.
    - helps with autoloading packages to greatly reduce initial startup time.
      
      #+BEGIN_SRC emacs-lisp
      (unless (package-installed-p 'use-package)
	  (package-refresh-contents)
	  (package-install 'use-package))
      (require 'use-package)
      (setq use-package-always-ensure t)
      #+END_SRC

** Emacs String Manipulation Library
   
   This is required for some plugins.
   
   #+BEGIN_SRC emacs-lisp
   (use-package s)
   #+END_SRC
   
   #+latex: \newpage
* Appearance related
  
  Setup appearance early so that if something goes wrong with the init, Emacs is still looking good.
  
** Maximize Emacs on startup
   
   This snippet works in *nix and all (relevant) versions of Windows.
   
   #+BEGIN_SRC emacs-lisp
   (if (eq system-type 'windows-nt)
       (with-no-warnings
         (defun w32-maximize-frame ()
           "Maximize the current frame (windows only)"
           (interactive)
           (w32-send-sys-command 61488))
         (add-hook 'windows-setup-hook 'w32-maximize-frame t))
     (set-frame-parameter nil 'fullscreen 'maximized))
   #+END_SRC
   
** Minimal GUI
   
   Remove unnecessary GUI elements: menu-bar, tool-bar, and scroll-bar.
   
   #+BEGIN_SRC emacs-lisp
   (if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
   (if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
   (if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
   #+END_SRC
   
** No splash screen
   
   
   I prefer loading up to the scratch buffer on initial startup.
   
   #+BEGIN_SRC emacs-lisp
   (setq inhibit-splash-screen t)
   #+END_SRC
   
** Initial scratch buffer message
   
   #+BEGIN_SRC emacs-lisp
   (setq initial-scratch-message "")
   #+END_SRC
   
** Theme
   
*** Colors
    
    I really like the having a colorized theme.
    
    #+BEGIN_SRC emacs-lisp
    (use-package color-theme
    :init
    :config
    )
    #+END_SRC
    
*** Hook =make-frame= to detect if we're in a TTY or GUI
    #+BEGIN_SRC emacs-lisp
    (color-theme-initialize)
    (load-theme 'wheatgrass t)
    (enable-theme 'wheatgrass)
    #+END_SRC
** RainbowDelimiters
   
   Highlight matching delimiters with unique colors. It's virtually necessary with emacs-lisp.
   
   #+BEGIN_SRC emacs-lisp
   (use-package rainbow-delimiters
   :commands (rainbow-delimiters-mode)
   :init
   (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
   #+END_SRC
   
** Highlight matching parenthesis
   
   Specifically under the cursor
   
   #+BEGIN_SRC emacs-lisp
   (defvar show-paren-delay)
   (setq show-paren-delay 0.0)
   (show-paren-mode t)
   #+END_SRC
   
** Highlight trailing whitespace
   
   Trailing whitespace is really annoying, especially when pasting from certain terminals.
   
   #+BEGIN_SRC emacs-lisp
   (defun my/buf-show-trailing-whitespace ()
     (interactive)
       (setq show-trailing-whitespace t))
   (add-hook 'prog-mode-hook 'my/buf-show-trailing-whitespace)
   (custom-set-faces '(trailing-whitespace ((t (:background "dim gray")))))
   #+END_SRC
   
** Prettify symbols
   
   Convert certain words into symbols. Prime example: =lambda= becomes =Î»=.
   
   #+BEGIN_SRC emacs-lisp
   (global-prettify-symbols-mode)
   #+END_SRC
   
** Show column number in modeline
   
   #+BEGIN_SRC emacs-lisp
   (column-number-mode t)
   #+END_SRC
   
** Prettify source code in org-mode
   Org mode should have pretty highlighting for source code.
   
   #+BEGIN_SRC emacs-lisp
   (setq org-src-fontify-natively t)
   (setq org-src-tab-acts-natively t)
   (setq org-edit-src-content-indentation 0)
   (use-package htmlize)
   #+END_SRC
   
   #+latex: \newpage
* General settings
  
  These settings don't belong to any specific mode or package. Some packages are
  exceptional for being very simple.
  
** Optimize org-babel config for faster startup
   
   Running =org-babel-load-file= increases startup time, so only do it when there
   are changes to update. Only run it when =config.el= is missing, and delete
   =config.el= when =config.org= changes. (see [[file:init.el::%3B%3B%20`org-babel-load-file`%20increases%20startup%20time,%20so%20only%20do%20it%20if%20necessary.][init.el]])
   
   #+BEGIN_SRC emacs-lisp
   (defun my/delete-config-el ()
       "Delete ~/.emacs.d/config.el when the current buffer is ~/.emacs.d/config.org"
       (defvar my-configel)
       (setq my-configel "~/git/menglehorn-linux-dotfiles/configs/emacs/config.el")
       (if (s-suffix? "emacs/config.org" buffer-file-name)
           (if (file-exists-p my-configel)
               (progn (delete-file "~/git/menglehorn-linux-dotfiles/configs/emacs/config.el")
                      (delete-file "~/git/menglehorn-linux-dotfiles/configs/emacs/config.elc")))))

   (add-hook 'after-save-hook 'my/delete-config-el)
   #+END_SRC
   
** Set up org-babel
   We need to allow SH scripts to be executed by org-babel.
   
   #+BEGIN_SRC emacs-lisp
   (require 'ob-sh)
   #+END_SRC
   
** Start server if it isn't started
   
   Turn the first Emacs process into a server, which allows reuse of a that process
   through the shell command =emacsclient=.
   
   #+BEGIN_SRC emacs-lisp
   (require 'server)
   (if (not (server-running-p)) (server-start))
   #+END_SRC
   
** Backup & auto-save files in one place
   
   These files are useful if something goes wrong, but they're also annoying in how
   they clutter directories. Put them in =~/.emacs.d/tmp= to remedy this.
   
   #+BEGIN_SRC emacs-lisp
   (setq backup-directory-alist `((".*" . "~/.emacs.d/tmp"))
	   auto-save-file-name-transforms `((".*" , "~/.emacs.d/tmp" t)))
   #+END_SRC
   
** Scroll smoothly
   
   #+BEGIN_SRC emacs-lisp
   (setq scroll-margin 0)
   (setq scroll-conservatively 10000)
   (setq scroll-preserve-screen-position t)
   #+END_SRC
   
** Sentences end with a single period
   
   #+BEGIN_SRC emacs-lisp
   (setq sentence-end-double-space nil)
   #+END_SRC
   
** y/n instead of yes/no
   
   #+BEGIN_SRC emacs-lisp
   (fset 'yes-or-no-p 'y-or-n-p)
   #+END_SRC
   
** Wrap text at 80 characters
   
   #+BEGIN_SRC emacs-lisp
   (setq-default fill-column 80)
   #+END_SRC
   
** Auto-detect indent settings
   
   I prefer to follow a file's indenting style instead of enforcing my own, if
   possible. =dtrt-indent= does this and works for most mainstream languages.
   
   #+BEGIN_SRC emacs-lisp
   (use-package dtrt-indent)
   #+END_SRC
   
** Auto-update changed files
   
   If a file is changed outside of Emacs, automatically load those changes.
   
   #+BEGIN_SRC emacs-lisp
   (global-auto-revert-mode t)
   #+END_SRC
   
** Auto-executable scripts in *nix
   
   When saving a file that starts with =#!=, make it executable.
   
   #+BEGIN_SRC emacs-lisp
   (add-hook 'after-save-hook
	   'executable-make-buffer-file-executable-if-script-p)
   #+END_SRC
   
** Enable HideShow in programming modes
   
   Useful for getting an overview of the code. It works better in some
   languages and layouts than others.
   
   #+BEGIN_SRC emacs-lisp
   (defun my/enable-hideshow ()
       (interactive)
       (hs-minor-mode t))
   (add-hook 'prog-mode-hook 'my/enable-hideshow)
   #+END_SRC
   
** Recent Files
   
   Enable =recentf-mode= and remember a lot of files.
   
   #+BEGIN_SRC emacs-lisp
   (recentf-mode 1)
   (defvar recentf-max-saved-items)
   (setq recentf-max-saved-items 200)
   #+END_SRC
   
** Better same-name buffer distinction
   
   When two buffers are open with the same name, this makes it easier to tell them
   apart.
   
   #+BEGIN_SRC emacs-lisp
   (require 'uniquify)
   (setq uniquify-buffer-name-style 'forward)
   #+END_SRC
   
** Remember last position for reopened files
    
   #+BEGIN_SRC emacs-lisp
   (if (version< emacs-version "25.0")
       (progn (require 'saveplace)
	   (setq-default save-place t))
   (save-place-mode 1))
   #+END_SRC
    
** Disable garbage collection in minibuffer
    
   See [[http://tiny.cc/7wd7ay][this article]] for more info.
    
   #+BEGIN_SRC emacs-lisp
   (defun my/minibuffer-setup-hook ()
   (setq gc-cons-threshold most-positive-fixnum))
   (defun my/minibuffer-exit-hook ()
   (setq gc-cons-threshold 800000))
   (add-hook 'minibuffer-setup-hook #'my/minibuffer-setup-hook)
   (add-hook 'minibuffer-exit-hook #'my/minibuffer-exit-hook)
   #+END_SRC
** Configure default web browser
   I use Firefox as my default browser.

   #+BEGIN_SRC emacs-lisp
   (defvar browse-url-generic-program)
   (setq browse-url-browser-function 'browse-url-generic
         browse-url-generic-program "firefox")
   #+END_SRC

   #+latex: \newpage
* Install and Set Up packages
** BBDB
   
   Install the Big Brother Database
   
   #+BEGIN_SRC emacs-lisp
   (use-package bbdb
     :init
     (require 'bbdb)
     (bbdb-initialize 'gnus 'message))
   #+END_SRC
** =request.el=
   This is an HTTP library for emacs.

   #+BEGIN_SRC emacs-lisp
   (use-package request)
   #+END_SRC
** =git=
   An Elisp API for programmatically using Git.

   #+BEGIN_SRC emacs-lisp
   (use-package git)
   #+END_SRC
** =el-get=
   I use this to grab arbitrary lisp from github.

   #+BEGIN_SRC emacs-lisp
   (add-to-list 'load-path "~/.emacs.d/el-get")
   (use-package el-get)
   (require 'el-get)

   #+END_SRC
** ERC IRC Client
   
   IRC Client for Emacs
   
   #+BEGIN_SRC emacs-lisp
   (use-package erc-colorize)
   (use-package erc-crypt)
   (use-package erc-hl-nicks)
   (use-package erc-image)
   (use-package erc-social-graph)
   (use-package erc-youtube)
   (require 'tls)
   #+END_SRC
   
** Twitter Mode
   
   Browse Twitter from Emacs
   
   #+BEGIN_SRC emacs-lisp
   (use-package twittering-mode
     :init
     (if (executable-find "convert")
         (setq twittering-convert-fix-size 32))
     (if (executable-find "gzip")
         (setq twittering-use-icon-storage t)))
   #+END_SRC
   
** Evil Powerline
   
   Powerline for Evil mode
   
   #+BEGIN_SRC emacs-lisp
   (use-package powerline)
   (use-package powerline-evil)
   #+END_SRC
   
** Magit
   
   Easy Git management
   
   #+BEGIN_SRC emacs-lisp
   (use-package magit)
   (use-package magit-popup)
   #+END_SRC
   
** Ledger Mode
   
   I use ledger-cli for my personal finances, here I make it evil friendly.
   
   #+BEGIN_SRC emacs-lisp
   (use-package ledger-mode
     :ensure t
     :init
     (setq ledger-clear-whole-transactions 1)

     :config
     (add-to-list 'evil-emacs-state-modes 'ledger-report-mode)
     :mode "\\.ldg\\'")
   #+END_SRC
   
** Smex
   
   Smart M-x for Emacs
   
   #+BEGIN_SRC emacs-lisp
   (use-package smex
     :init
     (global-set-key (kbd "M-x") 'smex))
   #+END_SRC
   
** Git Commit Mode
   
   Mode for Git Commits
   
   #+BEGIN_SRC emacs-lisp
   (use-package git-commit)
   #+END_SRC

** JSON Formatter
   Command to clean up and prettify json.

   #+BEGIN_SRC emacs-lisp
   (use-package json-mode)
   #+END_SRC
** EMMS

   
   Emacs Multimedia System
   
   #+BEGIN_SRC emacs-lisp
   (use-package emms)
   (use-package emms-info-mediainfo)

   (require 'emms-setup)
   (emms-standard)
   (emms-default-players)

   ;; After loaded
   ;(require 'emms-info-mediainfo)
   ;(add-to-list 'emms-info-functions 'emms-info-mediainfo)
   (require 'emms-info-metaflac)
   (add-to-list 'emms-info-functions 'emms-info-metaflac)

   (require 'emms-player-simple)
   (require 'emms-source-file)
   (require 'emms-source-playlist)
   (setq emms-source-file-default-directory "~/Music/")
   #+END_SRC
   
** w3m
   
   Web browser for Emacs
   
   #+BEGIN_SRC emacs-lisp
   (use-package w3m
     :ensure t
     :init
     (setenv "PATH" (concat (getenv "PATH") ":/usr/local/bin"))
     (setq exec-path (append exec-path '("/usr/local/bin")))
     (autoload 'w3m-browse-url "w3m")
     (global-set-key "\C-xm" 'browse-url-at-point)
     (setq w3m-use-cookies t)
     (setq w3m-default-display-inline-images t))
   #+END_SRC
   
** multi-term
   
   Multiple terminal manager for Emacs
   
   #+BEGIN_SRC emacs-lisp
   (use-package multi-term
     :init
     (setq multi-term-program "/bin/bash"))
   #+END_SRC
** web-mode
   
   web-mode.el is an emacs major mode for editing web templates aka HTML files embedding parts (CSS/JavaScript) and blocks (pre rendered by client/server side engines).
   
   #+BEGIN_SRC emacs-lisp
   (use-package web-mode
     :init
       (require 'web-mode)
       (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
       (add-to-list 'auto-mode-alist '("\\.php\\'" . web-mode))
       (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
       (add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
       (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
       (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
       (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
       (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode)))
   #+END_SRC
** =exec-path-from-shell=
   This is used to grab envirtonment variables from the shell.

   #+BEGIN_SRC emacs-lisp
   (use-package exec-path-from-shell
     :init
     (require 'exec-path-from-shell)
     (exec-path-from-shell-copy-env "SSH_AGENT_PID")
     (exec-path-from-shell-copy-env "PATH")
     (exec-path-from-shell-copy-env "SSH_AUTH_SOCK"))
   #+END_SRC
** =Company-mode=
   Company is a text completion framework for Emacs.
   The name stands for "complete anything". It uses pluggable back-ends and front-ends to retrieve and display completion candidates.
   #+BEGIN_SRC emacs-lisp
   (use-package company
     :init
     (add-hook 'after-init-hook 'global-company-mode))
   #+END_SRC
** =nnreddit=
   A Reddit backend for the Gnus newsreader.

   #+BEGIN_SRC emacs-lisp
   ;(el-get-bundle nnredit
   ;  :url "https://github.com/paul-issartel/nnreddit.git"
   ;  (add-to-list 'gnus-secondary-select-methods '(nnreddit "")))
   #+END_SRC
** Matrix Integration
   A Matrix Chat client.

   #+BEGIN_SRC emacs-lisp
   (use-package matrix-client
     :init
     (setq matrix-homeserver-base-url "https://matrix.productionservers.net"))
   #+END_SRC
** =govc= VMware Integration
   A VMware integration script

   #+BEGIN_SRC emacs-lisp
   (use-package govc)
   #+END_SRC
** =helm-spotify-plus=
   I enjoy listening to spotify, bonus points for emacs integration.

   #+BEGIN_SRC emacs-lisp
   (use-package helm-spotify-plus
     :init
     (global-set-key (kbd "C-c s s") 'helm-spotify-plus)
     (global-set-key (kbd "C-c s p") 'helm-spotify-plus-play)
     (global-set-key (kbd "C-c s g") 'helm-spotify-plus-pause))
   #+END_SRC
** =homeassistant-mode=
   A bit of elisp to allow me to control my home lighting from inside emacs.

   #+BEGIN_SRC emacs-lisp
   (el-get-bundle homeassistant-mode
     :url "https://github.com/K0HAX/homeassistant-mode.git"
     (load-file "~/.emacs.d/el-get/homeassistant-mode/homeassistant-mode.elc")
     (setq mje/homeassistant-url "http://home-assistant.lan.productionservers.net:8123")
     (global-set-key (kbd "C-c s h") 'helm-homeassistant))
   #+END_SRC
#+latex: \newpage
* =Org-mode=
** Install org-mode
   
   #+BEGIN_SRC emacs-lisp
   (use-package org)
   #+END_SRC

** Todo Keywords  
   Here are my =TODO= states and color settings.

   #+BEGIN_SRC emacs-lisp
   (setq org-todo-keywords
         (quote ((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
                 (sequence "WAITING(W@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)" "PHONE" "MEETING"))))

   (setq org-todo-keyword-faces
         (quote (("TODO" :foreground "red" :weight bold)
                 ("NEXT" :foreground "blue" :weight bold)
                 ("DONE" :foreground "forest green" :weight bold)
                 ("WAITING" :foreground "orange" :weight bold)
                 ("HOLD" :foreground "magenta" :weight bold)
                 ("CANCELLED" :foreground "forest green" :weight bold)
                 ("MEETING" :foreground "forest green" :weight bold)
                 ("PHONE" :foreground "forest green" :weight bold))))
   #+END_SRC
** Todo Selection
   #+BEGIN_SRC emacs-lisp
   (setq org-use-fast-todo-selection t)
   #+END_SRC
   Changing a task state is done with =C-c C-t KEY=
** Todo State Triggers
   Trigger breakdown
   - Moving a task to =CANCELLED= adds a =CANCELLED= tag
   - Moving a task to =WAITING= adds a =WAITING= tag
   - Moving a task to =HOLD= adds =WAITING= and =HOLD= tags
   - Moving a task to a done state removes =WAITING= and =HOLD= tags
   - Moving a task to =TODO= removes =WAITING=, =CANCELLED=, and =HOLD= tags
   - Moving a task to =NEXT= removes =WAITING=, =CANCELLED=, and =HOLD= tags
   - Moving a task to =DONE= removes =WAITING=, =CANCELLED=, and =HOLD= tags

   #+BEGIN_SRC emacs-lisp
   (setq org-todo-state-tags-triggers
         (quote (("CANCELLED" ("CANCELLED" . t))
                 ("WAITING" ("WAITING" . t))
                 ("HOLD" ("WAITING") ("HOLD" . t))
                 (done ("WAITING") ("HOLD"))
                 ("TODO" ("WAITING") ("CANCELLED") ("HOLD"))
                 ("NEXT" ("WAITING") ("CANCELLED") ("HOLD"))
                 ("DONE" ("WAITING") ("CANCELLED") ("HOLD")))))
   #+END_SRC
** Remove empty =LOGBOOK= drawers
   #+BEGIN_SRC emacs-lisp
   ;; Remove empty LOGBOOK drawers on clock out
   (defun bh/remove-empty-drawer-on-clock-out ()
     (interactive)
     (save-excursion
       (beginning-of-line 0)
       (org-remove-empty-drawer-at "LOGBOOK" (point))))

   (add-hook 'org-clock-out-hook 'bh/remove-empty-drawer-on-clock-out 'append)
   #+END_SRC
** Agenda Files
   #+BEGIN_SRC emacs-lisp
   (setq org-agenda-files (quote ("~/ownCloud/clientsync/org-mode")))
   #+END_SRC
** Refile captured
   Any file in =org-agenda-files= are valid refile targets.

   #+BEGIN_SRC emacs-lisp
   ; Targets include any file contributing to the agenda - up to 9 levels deep
   (setq org-refile-targets (quote ((org-agenda-files :maxlevel . 9))))

   ; Use full outline paths for refile targets - we file directly with IDO
   (setq org-refile-use-outline-path t)

   ; Targets complete directly with IDO
   (setq org-outline-path-complete-in-steps nil)

   ; Allow refile to create parent tasks with confirmation
   (setq org-refile-allow-creating-parent-nodes (quote confirm))

   ;;;; Refile settings
   ; Exclude DONE state tasks from refile targets
   (defun bh/verify-refile-target ()
     "Exclude todo keywords with a done state from refile targets"
     (not (member (nth 2 (org-heading-components)) org-done-keywords)))

   (setq org-refile-target-verify-function 'bh/verify-refile-target)
   #+END_SRC
** =Org-bullets=
   I don't see a reason why you /wouldn't/ want this.
   
   #+BEGIN_SRC emacs-lisp
   (use-package org-bullets
     :commands (org-bullets-mode)
     :init
       (setq org-bullets-bullet-list '("â"))
       (add-hook 'org-mode-hook 'org-bullets-mode))
   #+END_SRC
   
** Set up notes and todos
   
   =Org-mode= is great for project management, and I use it quite a bit for that.
   
   #+BEGIN_SRC emacs-lisp
   (setq org-default-notes-file "~/ownCloud/clientsync/org-mode/todo.org")

   ;; Org-Mode Capture Templates
   (defvar org-capture-templates)
   (setq org-capture-templates
         '(("t" "Todo" entry (file+headline "~/ownCloud/clientsync/org-mode/refile.org" "Tasks")
            "* TODO %?\n%U\n%a\n" :clock-in t :clock-resume t)
           ("r" "Respond" entry (file "~/ownCloud/clientsync/org-mode/refile.org")
            "* NEXT Respond to %:from %:subject\nSCHEDULED: %t\n%U\n%a\n" :clock-in t :clock-resume t :immediate-finish t)
           ("j" "Journal" entry (file+datetree "~/ownCloud/clientsync/org-mode/journal.org")
            "* %? %?\n%U\n" :clock-in t :clock-resume t)
           ("m" "Meeting" entry (file "~/ownCloud/clientsync/org-mode/refile.org")
            "* MEETING with %? :MEETING:\n%U" :clock-in t :clock-resume t)
           ("p" "Phone call" entry (file "~/ownCloud/clientsync/org-mode/refile.org")
            "* PHONE %? :PHONE:\n%U" :clock-in t :clock-resume t)))

   (global-set-key (kbd "C-c c") 'org-capture)
   (setq org-log-done 'time)
   #+END_SRC
   
** =ob-dot=
   Let's set up capacity to create pretty diagrams

   #+BEGIN_SRC emacs-lisp
   (require 'ob-dot)
   #+END_SRC
** =calfw=
   
   Let's use a pretty calendar while we're at it.
   
   #+BEGIN_SRC emacs-lisp
   (use-package calfw
     :init
     (require 'calfw)
     (require 'calfw-org)
     (require 'calfw-ical))
   #+END_SRC
   
** =ox-twbs=
   
   
   =Twitter Bootstrap= or just =Bootstrap= is prettier than out of the box =Org-mode=.
   Let's get it installed!
   
   #+BEGIN_SRC emacs-lisp
   (use-package ox-twbs)
   #+END_SRC
** =ox-latex=
   
   =ox-latex= allows syntax highlighted output. Just make sure to run the following code.
   
   #+BEGIN_SRC sh
   sudo pip install pygments
   #+END_SRC
   
   And set up =ox-latex=
   #+BEGIN_SRC emacs-lisp
   (require 'ox-latex)
   (add-to-list 'org-latex-packages-alist '("" "minted"))
   (setq org-latex-listings 'minted)
   (setq org-latex-pdf-process
	 '("xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
   #+END_SRC

** =ob-sql=
   =ob-sql= allows me to add MySQL queries to org-mode and execute them.

   #+BEGIN_SRC emacs-lisp
   (use-package sql
     :init
     (require 'sql))
   (require 'ob-sql)
   #+END_SRC

** org-publish
   I have a website to publish!

   #+BEGIN_SRC emacs-lisp
   (setq org-publish-project-alist
	 '(
	   ("org-notes"
	    :base-directory "~/ownCloud/clientsync/org/"
	    :base-extension "org"
	    :publishing-directory "/root@websites01.lan.productionservers.net:/var/www/michael.englehorn.com/public_html/"
	    :recursive t
	    :publishing-function org-twbs-publish-to-html
	    :headline-levels 4
	    :auto-preamble t)
	   ("org-static"
	    :base-directory "~/ownCloud/clientsync/org/"
	    :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf\\|php\\|txt\\|asc"
	    :publishing-directory "/root@websites01.lan.productionservers.net:/var/www/michael.englehorn.com/public_html/"
	    :recursive t
	    :publishing-function org-publish-attachment)
	   ("org" :components ("org-notes" "org-static"))))
   #+END_SRC
   #+latex: \newpage
* Customizations
** Powerline
   
   Initialize the Powerline.
   
   #+BEGIN_SRC emacs-lisp
   (require 'powerline)
   #+END_SRC
   
** Powerline theme
   
   Set up the powerline theme
   
   #+BEGIN_SRC emacs-lisp
   (powerline-default-theme)
   #+END_SRC

** Load secrets
   
   I keep slightly more sensitive information in a separate file so that I can easily publish my main configuration.
   
   #+BEGIN_SRC emacs-lisp
   (el-get-bundle menglehorn-emacs-secret
     :url "git@github.com:K0HAX/menglehorn-emacs-secret.git"
     :feature "menglehorn-emacs-secret"
     (load-file "~/.emacs.d/el-get/menglehorn-emacs-secret/menglehorn-emacs-secret.elc"))
   #+END_SRC
 
** Restart Emacs
   
   It's useful to be able to restart emacs from inside emacs.
   Configure restart-emacs to allow this.
   
   #+BEGIN_SRC emacs-lisp
   (use-package restart-emacs)
   #+END_SRC
** Ledger Reports

   Some custom and shorter keywords for ledger reports (C-r r in ledger-mode)

   #+BEGIN_SRC emacs-lisp
   (setq ledger-reports
         (quote
          (("register" "ledger ")
           ("bal" "ledger -f %(ledger-file) bal Assets Liabilities")
           ("bigbal" "ledger -f %(ledger-file) bal")
           ("reg" "ledger -f %(ledger-file) reg")
           ("payee" "ledger -f %(ledger-file) reg @%(payee)")
           ("account" "ledger -f %(ledger-file) reg %(account)"))))
   #+END_SRC
** Newsticker List
   Set up RSS feeds

   #+BEGIN_SRC emacs-lisp
   (setq newsticker-url-list-defaults
   (quote
       (("NY Times" "http://partners.userland.com/nytRss/nytHomepage.xml")
       ("The Register" "http://www.theregister.co.uk/tonys/slashdot.rdf")
       ("slashdot" "http://slashdot.org/index.rss" nil 3600))))
   #+END_SRC
** Mail Processing

   Set up the mail sending function

   #+BEGIN_SRC emacs-lisp
   (setq send-mail-function 'smtpmail-send-it)
   #+END_SRC
** Twittering Mode Settings
   We want to encrypt the Oauth credentials for =twittering-mode=

   #+BEGIN_SRC emacs-lisp
   (setq twittering-use-master-password t)
   #+END_SRC
** Customizations file
   Move the customizations file out from init.el so we don't break the Git repo.
  
   #+BEGIN_SRC emacs-lisp
   (setq custom-file "~/.emacs.d/emacs-custom.el")
   (load custom-file)
   #+END_SRC
** Disable blinking and flashing
   Disable the annoying bell
   
   #+BEGIN_SRC emacs-lisp
   (setq ring-bell-function 'ignore)
   #+END_SRC
   
** M-s s to SSH to a host.
   
   I wanted to by able to easily SSH from Emacs, so I wrote some elisp.
   
   #+BEGIN_SRC emacs-lisp
   (defun ssh-to-host (x)
     "Ask for host."
     (interactive "sHost: ")
     (let* ((buffer-name (format "*SSH %s*" x))
	    (buffer (get-buffer buffer-name)))
       (if buffer
	   (switch-to-buffer buffer)
	 (multi-term)
	 (term-send-string
	  (get-buffer-process (rename-buffer buffer-name))
	  (format "ssh %s\r" x)))))

   (global-set-key (kbd "M-s s") 'ssh-to-host)
   #+END_SRC
   
** Ask to open as root if I lack permission to edit
   
   Very useful. If I try to open a file I don't have write permissions to, ask if I want to open it as root using tramp.
   
   Note: if you're experiencing problems using this (like tramp hanging), check that you can open them "manually" in the first place, C-x C-f /sudo::/path/to/file. Check the [[http://www.emacswiki.org/emacs/TrampMode][tramp]] troubleshooting section at emacs wiki.
   
   #+BEGIN_SRC emacs-lisp
   (defun th-rename-tramp-buffer ()
     (when (file-remote-p (buffer-file-name))
       (rename-buffer
	(format "%s:%s"
		(file-remote-p (buffer-file-name) 'method)
		(buffer-name)))))

   (add-hook 'find-file-hook
	     'th-rename-tramp-buffer)

   (defadvice find-file (around th-find-file activate)
     "Open FILENAME using tramp's sudo method if it's read-only."
     (if (and (not (file-writable-p (ad-get-arg 0)))
	      (not (file-remote-p default-directory))
	      (y-or-n-p (concat "File "
				(ad-get-arg 0)
				" is read-only.  Open it as root? ")))
	 (th-find-file-sudo (ad-get-arg 0))
       ad-do-it))

   (defun th-find-file-sudo (file)
     "Opens FILE with root privileges."
     (interactive "F")
     (set-buffer (find-file (concat "/sudo::" file))))
   #+END_SRC
   
** Dired customizations
   
    - Human readable sizes in Dired
    - Sort by size
      
    #+BEGIN_SRC emacs-lisp
    (setq dired-listing-switches "-alh")
    #+END_SRC
    
** Key bindings
   Set up custom global key bindings.
   #+BEGIN_SRC emacs-lisp
   (global-set-key (kbd "<f12>") 'org-agenda)
   (global-set-key (kbd "<f8>") 'org-cycle-agenda-files)
   (global-set-key (kbd "<f9> b") 'bbdb)
   (global-set-key (kbd "<f9> c") 'my-open-calendar)
   (global-set-key (kbd "<f9> g") 'gnus)
   (global-set-key (kbd "<f11>") 'org-clock-goto)
   (global-set-key (kbd "C-c c") 'org-capture)
   #+END_SRC
    #+latex: \newpage
* =BBDB=
** Automatically add people to the =bbdb=
   #+BEGIN_SRC emacs-lisp
   (bbdb-initialize 'gnus 'message)
   (bbdb-mua-auto-update-init 'message)
   (setq bbdb-mua-auto-update-p 'query)
   #+END_SRC
#+latex: \newpage
* Mutt
** Emacs as external editor
   #+BEGIN_SRC emacs-lisp
   (add-to-list 'auto-mode-alist '("/mutt" . mail-mode))
   #+END_SRC
** Autofill for Mail
   #+BEGIN_SRC emacs-lisp
   (add-hook 'mail-mode-hook 'turn-on-auto-fill)
   #+END_SRC
** Replace C-x # with C-x k
   #+BEGIN_SRC emacs-lisp
   (defun my-mail-mode-hook ()
     (auto-fill-mode 1)
     (abbrev-mode 1)
     (local-set-key "\C-Xk" 'server-edit))
   (add-hook 'mail-mode-hook 'my-mail-mode-hook)
   #+END_SRC
   #+latex: \newpage
* Evil Mode
** Enable evil mode
   
   #+BEGIN_SRC emacs-lisp
   (use-package evil)
   (use-package evil-leader)
   (use-package evil-org)
   (require 'evil)
   (evil-mode 1)
   #+END_SRC
   
** Set up global key-bindings, and make evil my leader.
   
   #+BEGIN_SRC emacs-lisp
   (eval-after-load "evil"
   '(progn
       (define-key evil-normal-state-map (kbd "M-h") 'evil-window-left)
       (define-key evil-normal-state-map (kbd "M-j") 'evil-window-down)
       (define-key evil-normal-state-map (kbd "M-k") 'evil-window-up)
       (define-key evil-normal-state-map (kbd "M-l") 'evil-window-right)
       (define-key evil-motion-state-map ";" 'smex)
       (define-key evil-motion-state-map ":" 'evil-ex)))
   #+END_SRC
   
** Set up key-bindings for ledger-mode
   
   #+BEGIN_SRC emacs-lisp
   (with-eval-after-load 'ledger-mode
     (define-key ledger-mode-map (kbd "C-c n") 'ledger-add-transaction)
     (define-key ledger-mode-map (kbd "C-c c") 'ledger-mode-clean-buffer)
     (define-key ledger-mode-map (kbd "C-c r") 'ledger-report))
   #+END_SRC
   
** Set up key-bindings for BBDB
   
   Set up the Key Bindings for the Big Brother Database.
   This code was pulled from [[https://github.com/tarleb/evil-rebellion/blob/master/evil-bbdb-rebellion.el][github/tarleb]]
   
   #+BEGIN_SRC emacs-lisp
   (evil-define-key 'motion bbdb-mode-map
     "\C-k"       'bbdb-delete-field-or-record
     "\C-x\C-s"   'bbdb-save
     "\C-x\C-t"   'bbdb-transpose-fields
     "\d"         'bbdb-prev-field ; DEL
     "\M-d"       'bbdb-dial
     "\t"         'bbdb-next-field ; TAB
     "+"          'bbdb-append-display
     "*"          'bbdb-do-all-records
     ";"          'bbdb-edit-foo
     "?"          'bbdb-help
     "!"          'bbdb-search-invert
     "="          'delete-other-windows
     "a"          'bbdb-add-mail-alias
     "A"          'bbdb-mail-aliases
     "C"          'bbdb-copy-records-as-kill
     "c"          'bbdb-create
     "d"          'bbdb-delete-field-or-record
     "e"          'bbdb-edit-field
     "h"          'bbdb-info
     "i"          'bbdb-insert-field
     "J"          'bbdb-next-field
     "j"          'bbdb-next-record
     "K"          'bbdb-prev-field
     "k"          'bbdb-prev-record
     "m"          'bbdb-mail
     "M"          'bbdb-mail-address
     "N"          'bbdb-next-field
     "n"          'bbdb-next-record
     "o"          'bbdb-omit-record
     "P"          'bbdb-prev-field
     "p"          'bbdb-prev-record
     "s"          'bbdb-save
     "T"          'bbdb-display-records-completely
     "t"          'bbdb-toggle-records-layout
     "u"          'bbdb-browse-url

     ;; Search keys
     "b"          'bbdb
     "/1"         'bbdb-display-records
     "/n"         'bbdb-search-name
     "/o"         'bbdb-search-organization
     "/p"         'bbdb-search-phone
     "/a"         'bbdb-search-address
     "/m"         'bbdb-search-mail
     "/N"         'bbdb-search-xfields
     "/x"         'bbdb-search-xfields
     "/c"         'bbdb-search-changed
     "/d"         'bbdb-search-duplicates
     "\C-xnw"     'bbdb-display-all-records
     "\C-xnd"     'bbdb-display-current-record
     )

   (evil-set-initial-state 'bbdb-mode 'motion)
   #+END_SRC
   
** Fix term-mode
   Term-mode shouldn't have evil bindings.
   
   #+BEGIN_SRC emacs-lisp
   (evil-set-initial-state 'term-mode 'emacs)
   #+END_SRC
** Fix govc-mode
   Govc shouldn't have evil bindings.

   #+BEGIN_SRC emacs-lisp
   (evil-set-initial-state 'govc-mode 'emacs)
   (evil-set-initial-state 'govc-mode-major-mode 'emacs)
   #+END_SRC
** Fix twittering-mode
   Twittering should have some evil bindings.

   #+BEGIN_SRC emacs-lisp
   (eval-after-load 'twittering-mode
     '(progn
        (evil-define-key 'motion twittering-mode-map
                                     "g" nil
                                     "g g" 'twittering-goto-first-status
                                     "c" 'twittering-current-timeline
                                     "C-u" 'twittering-scroll-down
                                     "/" 'evil-search-forward
                                     "?" 'evil-search-backward
                                     "n" 'evil-search-next
                                     "N" 'evil-search-previous
                                     [escape] 'twittering-edit-cancel-status
                                     "<tab>" 'twittering-goto-next-uri)
        (evil-set-initial-state 'twittering-mode 'motion)))
   #+END_SRC
   #+latex: \newpage
* Disabled Configs
  :PROPERTIES: 
  :header-args: :tangle no
  :END:      
  
  
  This section is where bad sections of this config can go if they break Emacs. It's only used for debugging purposes.

